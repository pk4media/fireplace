import Ember from 'ember';

import {module, test} from 'qunit';

import attr  from 'fireplace/model/attr';
import Model from 'fireplace/model/model';
import Store from 'fireplace/store';

import { makeSnapshot } from '../../helpers/firebase';

const get = Ember.get;
const set = Ember.set;

let Person;
let store;

module("Model - lifecycle properties", {
  beforeEach() {
    Person = Model.extend({
      firstName: attr(),
      lastName:  attr()
    });
  }
});

test("isNew is true if the model has no snapshot", function(assert) {
  const person = Person.create();

  assert.ok(get(person, 'isNew'), "person is new");
  set(person, "snapshot", makeSnapshot("person", {first_name: "Bob", last_name: "Johnson"}));
  assert.ok(!get(person, 'isNew'), "person is not new");
});


module("Model - ID", {
  beforeEach() {
    store  = Store.create({firebaseRoot: "https://foo.firebaseio.com"});
    Person = Model.extend({
      name: attr()
    });
    Person.store = store;
  }
});

test("has a default ID generated by Firebase", function(assert) {
  const person = Person.create({store: store});
  const id = get(person, "id");

  assert.ok(id, "ID should have been generated");
});

module("Model - store helpers", {
  beforeEach() {
    Person = Model.extend({
      name: attr()
    });
  }
});

test("Model#save proxies through to the store", function(assert) {
  assert.expect(3);

  let person;
  const store = {
    saveRecord(object, key) {
      assert.ok(true, "called store#saveRecord");
      assert.equal(object, person, "passes object through to the store");
      assert.equal(key, "name", "passes key through to the store");
    }
  };

  person = Person.create({store: store});
  person.save("name");
});

test("Model#update sets the value and saves", function(assert) {
  assert.expect(4);

  let person;
  const store = {
    saveRecord(object, key) {
      assert.ok(true, "called store#saveRecord");
      assert.equal(object, person, "passes object through to the store");
      assert.equal(key, "name", "passes key through to the store");
    }
  };

  person = Person.create({store: store});
  person.update("name", "Bobby");
  assert.equal(get(person, "name"), "Bobby", "has updated the name");
});

test("Model#delete proxies through to the store", function(assert) {
  assert.expect(2);

  let person;
  const store = {
    deleteRecord(object) {
      assert.ok(true, "called store#deleteRecord");
      assert.equal(object, person, "passes object through to the store");
    }
  };

  person = Person.create({store: store});
  person.delete();
});
